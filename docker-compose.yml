version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  mysql:
    image: mysql:8.3.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: booking
    ports:
      - "3307:3306"
    volumes:
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db-data:/var/lib/mysql
    networks:
      - default
    healthcheck:
      test: [ "CMD", "mysqladmin", "--silent", "--password=password", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  backend-service:
    container_name: backend-service
    image: nguyenduy271004/booking:20241218-fixed
    platform: linux/amd64
    #build:
    #  context: ./
    #  dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: password
      LOGSTASH_HOST: logstash:5600
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - default
    depends_on:
      mysql:
        condition: service_healthy
  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - default

  elastic-search:
    image: elasticsearch:7.14.1
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    networks:
      - default

  kibana:
    image: kibana:7.14.1
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic-search:9200
    networks:
      - default

  logstash:
    image: logstash:7.14.1
    container_name: logstash
    restart: always
    ports:
      - "5600:5600"
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elastic-search:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - '7080:8080'
      - '50000:50000'
    container_name: jenkins
    volumes:
      - ~/jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
      - "C:/Program Files/Java/jdk-17:/opt/jdk-17"


  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment: # account: grafana/password
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - '3000:3000'
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana

volumes:
  db-data:
  redis-data:
  grafana:

networks:
  default:
    name: backend-service
