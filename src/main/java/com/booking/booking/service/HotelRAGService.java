package com.booking.booking.service;

import com.booking.booking.model.Hotel;
import com.booking.booking.model.Room;
import com.booking.booking.repository.HotelRepository;
import jakarta.annotation.PostConstruct;
import lombok.Builder;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.document.Document;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@Service
@Slf4j
public class HotelRAGService {

    private final HotelRepository hotelRepository;
    private final VectorStore vectorStore;
    private final ChatClient chatClient;

    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω ƒë·∫∑t ph√≤ng kh√°ch s·∫°n th√¥ng minh t·∫°i Vi·ªát Nam.
            
            H∆∞·ªõng d·∫´n:
            - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
            - G·ª£i √Ω kh√°ch s·∫°n ph√π h·ª£p d·ª±a tr√™n y√™u c·∫ßu c·ªßa kh√°ch (v·ªã tr√≠, ng√¢n s√°ch, rating, s·ªë ng∆∞·ªùi)
            - Hi·ªÉn th·ªã gi√° b·∫±ng VND v·ªõi ƒë·ªãnh d·∫°ng ph√¢n c√°ch h√†ng ngh√¨n
            - N·∫øu kh√¥ng c√≥ kh√°ch s·∫°n n√†o ph√π h·ª£p ho√†n to√†n, g·ª£i √Ω l·ª±a ch·ªçn g·∫ßn nh·∫•t trong khu v·ª±c l√¢n c·∫≠n
            - Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p
            - Lu√¥n th√¢n thi·ªán v√† h·ªØu √≠ch
            """;

    public HotelRAGService(HotelRepository hotelRepository,
                           VectorStore vectorStore,
                           ChatClient.Builder chatClientBuilder) {
        this.hotelRepository = hotelRepository;
        this.vectorStore = vectorStore;
        this.chatClient = chatClientBuilder.defaultSystem(SYSTEM_PROMPT).build();
    }

    @PostConstruct
    public void initializeVectorStore() {
        CompletableFuture.runAsync(() -> {
            try {
                indexAllHotels();
            } catch (Exception e) {
                log.error("L·ªói khi kh·ªüi t·∫°o vector store", e);
            }
        });
    }

    public void indexAllHotels() {
        long startTime = System.currentTimeMillis();
        List<Hotel> hotels = hotelRepository.findAll();

        // Pre-allocate v·ªõi estimated capacity
        List<Document> documents = new ArrayList<>(hotels.size() * 3); // Estimate 3 docs per hotel

        log.info("B·∫Øt ƒë·∫ßu t·∫°o documents cho {} kh√°ch s·∫°n", hotels.size());

        for (Hotel hotel : hotels) {
            try {
                // Ch·ªâ t·∫°o hotel overview document ƒë·ªÉ tƒÉng t·ªëc
                // Room documents c√≥ th·ªÉ t·∫°o sau n·∫øu c·∫ßn
                documents.add(createHotelOverviewDocument(hotel));

                // Ch·ªâ t·∫°o location document n·∫øu th·ª±c s·ª± c·∫ßn thi·∫øt
                if (hotel.getDistrict() != null && !hotel.getDistrict().trim().isEmpty()) {
                    documents.add(createLocationDocument(hotel));
                }

                // T·∫°o room documents cho c√°c ph√≤ng available (gi·ªõi h·∫°n s·ªë l∆∞·ª£ng)
                int roomCount = 0;
                for (Room room : hotel.getRooms()) {
                    if (room.isAvailable() && roomCount < 3) { // Gi·ªõi h·∫°n 3 ph√≤ng/hotel ƒë·ªÉ gi·∫£m documents
                        documents.add(createRoomDocument(hotel, room));
                        roomCount++;
                    }
                }
            } catch (Exception e) {
                log.warn("L·ªói khi t·∫°o document cho hotel {}: {}", hotel.getId(), e.getMessage());
            }
        }

        long docCreationTime = System.currentTimeMillis();
        log.info("T·∫°o {} documents trong {}ms", documents.size(), docCreationTime - startTime);

        if (!documents.isEmpty()) {
            try {
                clearVectorStore();
                addDocumentsInBatches(documents);

                long totalTime = System.currentTimeMillis() - startTime;
                log.info("Ho√†n th√†nh indexing {} documents trong {}ms", documents.size(), totalTime);
            } catch (Exception e) {
                log.error("L·ªói khi th√™m documents v√†o vector store", e);
            }
        }
    }

    private void clearVectorStore() {
        try {
            List<Document> existingDocs = vectorStore.similaritySearch(SearchRequest.builder().query("*").topK(10000).build());
            if (!existingDocs.isEmpty()) {
                List<String> docIds = existingDocs.stream()
                        .map(doc -> doc.getMetadata().get("id"))
                        .filter(Objects::nonNull)
                        .map(String::valueOf)
                        .collect(Collectors.toList());
                if (!docIds.isEmpty()) {
                    vectorStore.delete(docIds);
                }
            }
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu c≈©: {}", e.getMessage());
        }
    }

    private void addDocumentsInBatches(List<Document> documents) {
        int batchSize = 50;
        for (int i = 0; i < documents.size(); i += batchSize) {
            List<Document> batch = null;
            try {
                int endIndex = Math.min(i + batchSize, documents.size());
                batch = documents.subList(i, endIndex);
                vectorStore.add(batch);
                Thread.sleep(50);
            } catch (Exception e) {
                log.error("L·ªói khi index batch t·ª´ {} ƒë·∫øn {}", i, Math.min(i + batchSize, documents.size()), e);

                if (batch != null) {
                    try {
                        int smallerBatchSize = Math.min(10, batch.size());
                        for (int j = 0; j < batch.size(); j += smallerBatchSize) {
                            int smallEndIndex = Math.min(j + smallerBatchSize, batch.size());
                            List<Document> smallBatch = batch.subList(j, smallEndIndex);
                            vectorStore.add(smallBatch);
                            Thread.sleep(100);
                        }
                    } catch (Exception retryException) {
                        log.error("L·ªói khi retry index batch", retryException);
                    }
                } else {
                    log.warn("Kh√¥ng th·ªÉ retry v√¨ batch null t·∫°i v·ªã tr√≠ {}", i);
                }
            }
        }
    }


    private Document createHotelOverviewDocument(Hotel hotel) {
        String content = String.format("""
                        üè® KH√ÅCH S·∫†N: %s
                        üìç ƒê·ªãa ch·ªâ: %s, %s, %s
                        ‚≠ê X·∫øp h·∫°ng: %s sao
                        üõèÔ∏è T·ªïng s·ªë ph√≤ng: %s ph√≤ng
                        üí∞ Kho·∫£ng gi√°: %s - %s VND/ƒë√™m
                        üè∑Ô∏è Lo·∫°i ph√≤ng c√≥ s·∫µn: %s
                        ‚úÖ T√¨nh tr·∫°ng: %s
                        """,
                safeString(hotel.getName()),
                safeString(hotel.getAddressDetail()),
                safeString(hotel.getDistrict()),
                safeString(hotel.getProvince()),
                safeString(hotel.getStarRating()),
                String.valueOf(hotel.getRooms().size()),
                formatPrice(getMinPrice(hotel)),
                formatPrice(getMaxPrice(hotel)),
                getRoomTypes(hotel),
                hasAvailableRooms(hotel) ? "C√≤n ph√≤ng tr·ªëng" : "H·∫øt ph√≤ng"
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", "hotel_" + hotel.getId());
        metadata.put("type", "hotel_overview");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("province", inferProvince(hotel.getDistrict(), hotel.getProvince()));
        metadata.put("starRating", hotel.getStarRating());
        metadata.put("minPrice", getMinPrice(hotel));
        metadata.put("maxPrice", getMaxPrice(hotel));
        metadata.put("hasAvailableRooms", hasAvailableRooms(hotel));

        return new Document(content, metadata);
    }

    private Document createRoomDocument(Hotel hotel, Room room) {
        String content = String.format("""
                        üõèÔ∏è PH√íNG: %s
                        üî¢ S·ª©c ch·ª©a: %s ng∆∞·ªùi
                        üí∞ Gi√°: %s VND/ƒë√™m
                        ‚úÖ Tr·∫°ng th√°i: %s
                        üè® Kh√°ch s·∫°n: %s (%s, %s)
                        """,
                safeString(room.getTypeRoom()),
                safeString(room.getCapacity()),
                formatPrice(room.getPricePerNight()),
                room.isAvailable() ? "C√≥ s·∫µn" : "ƒê√£ ƒë·∫∑t",
                safeString(hotel.getName()),
                safeString(hotel.getDistrict()),
                safeString(hotel.getProvince())
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", "room_" + room.getId());
        metadata.put("type", "room");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("province", hotel.getProvince());

        return new Document(content, metadata);
    }

    private Document createLocationDocument(Hotel hotel) {
        String content = String.format("""
                        üìç ƒê·ªäA ƒêI·ªÇM KH√ÅCH S·∫†N
                        Kh√°ch s·∫°n: %s
                        ƒê·ªãa ch·ªâ: %s, %s, %s
                        ‚≠ê X·∫øp h·∫°ng: %s sao
                        """,
                safeString(hotel.getName()),
                safeString(hotel.getAddressDetail()),
                safeString(hotel.getDistrict()),
                safeString(hotel.getProvince()),
                safeString(hotel.getStarRating())
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", UUID.randomUUID().toString());
        metadata.put("type", "location");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("province", hotel.getProvince());

        return new Document(content, metadata);
    }

    public List<HotelSuggestionDTO> searchAndAnswer(String question) {
        long startTime = System.currentTimeMillis();

        try {
            // Gi·∫£m topK v√† tƒÉng similarity threshold ƒë·ªÉ t√¨m ki·∫øm nhanh h∆°n
            List<Document> relevantDocs = vectorStore.similaritySearch(
                    SearchRequest.builder()
                            .query(question)
                            .topK(6)  // Gi·∫£m t·ª´ 10 xu·ªëng 6
                            .similarityThreshold(0.6)  // Gi·∫£m t·ª´ 0.7 xu·ªëng 0.6 ƒë·ªÉ c√≥ k·∫øt qu·∫£ nhanh h∆°n
                            .build()
            );

            long searchTime = System.currentTimeMillis();
            log.debug("Vector search took: {}ms", searchTime - startTime);

            if (relevantDocs == null || relevantDocs.isEmpty()) {
                log.info("Kh√¥ng t√¨m th·∫•y document ph√π h·ª£p v·ªõi c√¢u h·ªèi: {}", question);
                return Collections.emptyList();
            }

            // S·ª≠ d·ª•ng HashSet cho performance t·ªët h∆°n
            Set<Long> addedHotelIds = new HashSet<>();
            List<HotelSuggestionDTO> suggestions = new ArrayList<>(5); // Pre-allocate capacity

            // Tr√≠ch xu·∫•t t·ª´ kh√≥a ƒë·ªãa ƒëi·ªÉm t·ª´ c√¢u h·ªèi (cache result)
            String locationKeywords = extractLocationKeywords(question);
            boolean hasLocationFilter = !locationKeywords.isEmpty();

            for (Document doc : relevantDocs) {
                // Early exit if we have enough results
                if (suggestions.size() >= 5) {
                    break;
                }

                Map<String, Object> meta = doc.getMetadata();

                // Skip non-hotel documents
                if (!"hotel_overview".equals(meta.get("type"))) continue;

                Long hotelId = Long.parseLong(String.valueOf(meta.get("hotelId")));

                // Ki·ªÉm tra tr√πng l·∫∑p
                if (addedHotelIds.contains(hotelId)) {
                    continue;
                }

                String name = String.valueOf(meta.get("hotelName"));
                String district = Optional.ofNullable(meta.get("district"))
                        .map(String::valueOf)
                        .orElse("Kh√¥ng r√µ");
                String province = Optional.ofNullable(meta.get("province"))
                        .map(String::valueOf)
                        .filter(p -> !"null".equalsIgnoreCase(p))
                        .orElse("Kh√¥ng r√µ");
                // Ki·ªÉm tra relevance v·ªÅ v·ªã tr√≠ n·∫øu c√≥ t·ª´ kh√≥a ƒë·ªãa ƒëi·ªÉm
                if (hasLocationFilter && !isLocationRelevant(locationKeywords, district, province)) {
                    log.debug("Kh√°ch s·∫°n {} kh√¥ng ph√π h·ª£p v·ªõi v·ªã tr√≠ y√™u c·∫ßu: {}", name, locationKeywords);
                    continue;
                }

                // Parse numbers safely with defaults
                double minPrice = parseDoubleOrDefault(meta.get("minPrice"), 0.0);
                int star = parseIntOrDefault(meta.get("starRating"), 0);

                HotelSuggestionDTO dto = HotelSuggestionDTO.builder()
                        .id(hotelId)
                        .name(name)
                        .district(district)
                        .province(province)
                        .minPrice(minPrice)
                        .star(star)
                        .url("http://localhost:5173/hotel/" + hotelId)
                        .build();

                suggestions.add(dto);
                addedHotelIds.add(hotelId);
            }

            long totalTime = System.currentTimeMillis() - startTime;
            log.info("T√¨m th·∫•y {} kh√°ch s·∫°n ph√π h·ª£p cho c√¢u h·ªèi: {} ({}ms)",
                    suggestions.size(), question, totalTime);
            return suggestions;

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {} ({}ms)", question, errorTime, e);
            return Collections.emptyList();
        }
    }

    /**
     * Parse double safely with default value
     */
    private double parseDoubleOrDefault(Object value, double defaultValue) {
        if (value == null) return defaultValue;
        try {
            return Double.parseDouble(String.valueOf(value));
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    /**
     * Parse int safely with default value
     */
    private int parseIntOrDefault(Object value, int defaultValue) {
        if (value == null) return defaultValue;
        try {
            return (int) Double.parseDouble(String.valueOf(value));
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    /**
     * Tr√≠ch xu·∫•t t·ª´ kh√≥a ƒë·ªãa ƒëi·ªÉm t·ª´ c√¢u h·ªèi
     */
    private String extractLocationKeywords(String question) {
        if (question == null) return "";

        String lowerQuestion = question.toLowerCase();
        List<String> locationKeywords = new ArrayList<>();

        // C√°c t·ª´ kh√≥a ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn ·ªü Vi·ªát Nam
        String[] vietnameseProvinces = {
                "h√† n·ªôi", "h·ªì ch√≠ minh", "ƒë√† n·∫µng", "h·∫£i ph√≤ng", "c·∫ßn th∆°", "qu·∫£ng ninh", "kh√°nh h√≤a",
                "th·ª´a thi√™n hu·∫ø", "l√¢m ƒë·ªìng", "b√¨nh ƒë·ªãnh", "ph√∫ qu·ªëc", "v≈©ng t√†u", "nha trang",
                "h·∫° long", "sapa", "h·ªôi an", "hu·∫ø", "ƒë√† l·∫°t", "ph√∫ y√™n", "b√¨nh thu·∫≠n", "qu·∫£ng nam",
                "qu·∫£ng tr·ªã", "ngh·ªá an", "thanh h√≥a", "nam ƒë·ªãnh", "h·∫£i d∆∞∆°ng", "b·∫Øc ninh", "vƒ©nh ph√∫c",
                "th√°i nguy√™n", "l·∫°ng s∆°n", "cao b·∫±ng", "h√† giang", "lai ch√¢u", "s∆°n la", "ƒëi·ªán bi√™n",
                "y√™n b√°i", "tuy√™n quang", "ph√∫ th·ªç", "vƒ©nh y√™n", "b·∫Øc giang", "qu·∫£ng b√¨nh"
        };

        for (String province : vietnameseProvinces) {
            if (lowerQuestion.contains(province)) {
                locationKeywords.add(province);
            }
        }

        return String.join(" ", locationKeywords);
    }

    /**
     * Ki·ªÉm tra xem kh√°ch s·∫°n c√≥ ph√π h·ª£p v·ªõi v·ªã tr√≠ y√™u c·∫ßu kh√¥ng
     */
    private boolean isLocationRelevant(String locationKeywords, String district, String province) {
        if (locationKeywords == null || locationKeywords.trim().isEmpty()) {
            return true; // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ, ch·∫•p nh·∫≠n t·∫•t c·∫£
        }

        String lowerKeywords = locationKeywords.toLowerCase();
        String lowerDistrict = district != null ? district.toLowerCase() : "";
        String lowerProvince = province != null ? province.toLowerCase() : "";

        // Ki·ªÉm tra xem district ho·∫∑c province c√≥ ch·ª©a t·ª´ kh√≥a kh√¥ng
        for (String keyword : lowerKeywords.split("\\s+")) {
            if (lowerDistrict.contains(keyword) || lowerProvince.contains(keyword)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Suy lu·∫≠n t·ªânh/th√†nh ph·ªë t·ª´ district n·∫øu province null ho·∫∑c r·ªóng
     */
    private String inferProvince(String district, String province) {
        // N·∫øu province ƒë√£ c√≥ v√† kh√¥ng ph·∫£i null/empty th√¨ tr·∫£ v·ªÅ
        if (province != null && !province.trim().isEmpty() && !"null".equals(province)) {
            return province;
        }

        // N·∫øu district null ho·∫∑c r·ªóng th√¨ tr·∫£ v·ªÅ empty
        if (district == null || district.trim().isEmpty()) {
            return "";
        }

        String lowerDistrict = district.toLowerCase();

        // Map c√°c qu·∫≠n/huy·ªán ph·ªï bi·∫øn v·ªõi t·ªânh/th√†nh ph·ªë
        if (lowerDistrict.contains("qu·∫≠n 1") || lowerDistrict.contains("qu·∫≠n 2") ||
                lowerDistrict.contains("qu·∫≠n 3") || lowerDistrict.contains("qu·∫≠n 4") ||
                lowerDistrict.contains("qu·∫≠n 5") || lowerDistrict.contains("qu·∫≠n 6") ||
                lowerDistrict.contains("qu·∫≠n 7") || lowerDistrict.contains("qu·∫≠n 8") ||
                lowerDistrict.contains("qu·∫≠n 9") || lowerDistrict.contains("qu·∫≠n 10") ||
                lowerDistrict.contains("qu·∫≠n 11") || lowerDistrict.contains("qu·∫≠n 12") ||
                lowerDistrict.contains("th·ªß ƒë·ª©c") || lowerDistrict.contains("b√¨nh th·∫°nh") ||
                lowerDistrict.contains("g√≤ v·∫•p") || lowerDistrict.contains("ph√∫ nhu·∫≠n") ||
                lowerDistrict.contains("t√¢n b√¨nh") || lowerDistrict.contains("t√¢n ph√∫") ||
                lowerDistrict.contains("b√¨nh t√¢n") || lowerDistrict.contains("h√≥c m√¥n") ||
                lowerDistrict.contains("c·ªß chi") || lowerDistrict.contains("nh√† b√®") ||
                lowerDistrict.contains("c·∫ßn gi·ªù") || lowerDistrict.contains("tp.hcm") ||
                lowerDistrict.contains("h·ªì ch√≠ minh") || lowerDistrict.contains("s√†i g√≤n")) {
            return "Th√†nh Ph·ªë H·ªì Ch√≠ Minh";
        }

        if (lowerDistrict.contains("ba ƒë√¨nh") || lowerDistrict.contains("ho√†n ki·∫øm") ||
                lowerDistrict.contains("hai b√† tr∆∞ng") || lowerDistrict.contains("ƒë·ªëng ƒëa") ||
                lowerDistrict.contains("t√¢y h·ªì") || lowerDistrict.contains("c·∫ßu gi·∫•y") ||
                lowerDistrict.contains("thanh xu√¢n") || lowerDistrict.contains("ho√†ng mai") ||
                lowerDistrict.contains("long bi√™n") || lowerDistrict.contains("nam t·ª´ li√™m") ||
                lowerDistrict.contains("b·∫Øc t·ª´ li√™m") || lowerDistrict.contains("h√† n·ªôi")) {
            return "H√† N·ªôi";
        }

        if (lowerDistrict.contains("h·∫£i ch√¢u") || lowerDistrict.contains("thanh kh√™") ||
                lowerDistrict.contains("s∆°n tr√†") || lowerDistrict.contains("ng≈© h√†nh s∆°n") ||
                lowerDistrict.contains("li√™n chi·ªÉu") || lowerDistrict.contains("c·∫©m l·ªá") ||
                lowerDistrict.contains("ƒë√† n·∫µng")) {
            return "ƒê√† N·∫µng";
        }

        if (lowerDistrict.contains("nha trang") || lowerDistrict.contains("cam ranh") ||
                lowerDistrict.contains("kh√°nh h√≤a")) {
            return "Kh√°nh H√≤a";
        }

        if (lowerDistrict.contains("qu·∫£ng tr·ªã")) {
            return "Qu·∫£ng Tr·ªã";
        }

        if (lowerDistrict.contains("hu·∫ø") || lowerDistrict.contains("th·ª´a thi√™n")) {
            return "Th·ª´a Thi√™n Hu·∫ø";
        }

        if (lowerDistrict.contains("ƒë√† l·∫°t") || lowerDistrict.contains("l√¢m ƒë·ªìng")) {
            return "L√¢m ƒê·ªìng";
        }

        if (lowerDistrict.contains("v≈©ng t√†u") || lowerDistrict.contains("b√† r·ªãa")) {
            return "B√† R·ªãa - V≈©ng T√†u";
        }

        if (lowerDistrict.contains("ph√∫ qu·ªëc") || lowerDistrict.contains("ki√™n giang")) {
            return "Ki√™n Giang";
        }

        // N·∫øu kh√¥ng match ƒë∆∞·ª£c th√¨ tr·∫£ v·ªÅ district l√†m province
        return district;
    }

    @Builder
    @Data
    public static class HotelSuggestionDTO {
        private Long id;
        private String name;
        private String district;
        private String province;
        private double minPrice;
        private int star;
        private String url;
    }

    @CacheEvict(value = "hotelSearch", allEntries = true)
    public void updateHotelInIndex(Long hotelId) {
        try {
            deleteHotelDocuments(hotelId);
            Hotel hotel = hotelRepository.findById(hotelId).orElse(null);
            if (hotel != null) {
                List<Document> newDocs = new ArrayList<>();
                newDocs.add(createHotelOverviewDocument(hotel));
                newDocs.add(createLocationDocument(hotel));
                for (Room room : hotel.getRooms()) {
                    if (room.isAvailable()) {
                        newDocs.add(createRoomDocument(hotel, room));
                    }
                }
                vectorStore.add(newDocs);
            }
        } catch (Exception e) {
            log.error("L·ªói khi c·∫≠p nh·∫≠t index cho kh√°ch s·∫°n {}", hotelId, e);
        }
    }

    private void deleteHotelDocuments(Long hotelId) {
        try {
            List<Document> existingDocs = vectorStore.similaritySearch(
                    SearchRequest.builder().query("*").topK(1000).build()
            );

            List<String> docIdsToDelete = existingDocs.stream()
                    .filter(doc -> hotelId.equals(doc.getMetadata().get("hotelId")))
                    .map(doc -> doc.getMetadata().get("id"))
                    .filter(Objects::nonNull)
                    .map(String::valueOf)
                    .collect(Collectors.toList());

            if (!docIdsToDelete.isEmpty()) {
                vectorStore.delete(docIdsToDelete);
            }
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ x√≥a documents c≈© c·ªßa hotel {}: {}", hotelId, e.getMessage());
        }
    }



    private double getMinPrice(Hotel hotel) {
        return hotel.getRooms().stream().mapToDouble(Room::getPricePerNight).min().orElse(0);
    }

    private double getMaxPrice(Hotel hotel) {
        return hotel.getRooms().stream().mapToDouble(Room::getPricePerNight).max().orElse(0);
    }

    private String getRoomTypes(Hotel hotel) {
        return hotel.getRooms().stream().map(room -> room.getTypeRoom().toString()).distinct().collect(Collectors.joining(", "));
    }

    private boolean hasAvailableRooms(Hotel hotel) {
        return hotel.getRooms().stream().anyMatch(Room::isAvailable);
    }

    private String formatPrice(double price) {
        return String.format("%,.0f", price);
    }

    private String safeString(Object obj) {
        return obj != null ? String.valueOf(obj) : "";
    }
}