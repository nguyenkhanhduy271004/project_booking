package com.booking.booking.service;

import com.booking.booking.model.Hotel;
import com.booking.booking.model.Room;
import com.booking.booking.repository.HotelRepository;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.document.Document;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@Service
@Slf4j
public class HotelRAGService {

    private final HotelRepository hotelRepository;
    private final VectorStore vectorStore;
    private final ChatClient chatClient;

    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω ƒë·∫∑t ph√≤ng kh√°ch s·∫°n th√¥ng minh t·∫°i TP.HCM, Vi·ªát Nam.
            
            H∆∞·ªõng d·∫´n:
            - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
            - G·ª£i √Ω kh√°ch s·∫°n ph√π h·ª£p d·ª±a tr√™n y√™u c·∫ßu c·ªßa kh√°ch (v·ªã tr√≠, ng√¢n s√°ch, rating, s·ªë ng∆∞·ªùi)
            - Hi·ªÉn th·ªã gi√° b·∫±ng VND v·ªõi ƒë·ªãnh d·∫°ng ph√¢n c√°ch h√†ng ngh√¨n
            - N·∫øu kh√¥ng c√≥ kh√°ch s·∫°n n√†o ph√π h·ª£p ho√†n to√†n, g·ª£i √Ω l·ª±a ch·ªçn g·∫ßn nh·∫•t
            - Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p
            - Lu√¥n th√¢n thi·ªán v√† h·ªØu √≠ch
            """;

    public HotelRAGService(HotelRepository hotelRepository,
                           VectorStore vectorStore,
                           ChatClient.Builder chatClientBuilder) {
        this.hotelRepository = hotelRepository;
        this.vectorStore = vectorStore;
        this.chatClient = chatClientBuilder
                .defaultSystem(SYSTEM_PROMPT)
                .build();
    }

    @PostConstruct
    public void initializeVectorStore() {
        log.info("B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o vector store...");
        CompletableFuture.runAsync(() -> {
            try {
                indexAllHotels();
                log.info("Ho√†n th√†nh kh·ªüi t·∫°o vector store");
            } catch (Exception e) {
                log.error("L·ªói khi kh·ªüi t·∫°o vector store", e);
            }
        });
    }

    public void indexAllHotels() {
        List<Hotel> hotels = hotelRepository.findAll();
        log.info("ƒêang index {} kh√°ch s·∫°n...", hotels.size());

        List<Document> documents = new ArrayList<>();

        for (Hotel hotel : hotels) {
            try {
                documents.add(createHotelOverviewDocument(hotel));

                for (Room room : hotel.getRooms()) {
                    documents.add(createRoomDocument(hotel, room));
                }

                documents.add(createLocationDocument(hotel));

            } catch (Exception e) {
                log.warn("L·ªói khi t·∫°o document cho hotel {}: {}", hotel.getId(), e.getMessage());
            }
        }

        if (!documents.isEmpty()) {
            try {
                clearVectorStore();

                addDocumentsInBatches(documents);

                log.info("ƒê√£ index th√†nh c√¥ng {} documents", documents.size());
            } catch (Exception e) {
                log.error("L·ªói khi th√™m documents v√†o vector store", e);
            }
        }
    }

    private void clearVectorStore() {
        try {
            List<Document> existingDocs = vectorStore.similaritySearch(
                    SearchRequest.builder()
                            .query("*")
                            .topK(10000)
                            .build()
            );

            if (!existingDocs.isEmpty()) {
                List<String> docIds = existingDocs.stream()
                        .map(doc -> doc.getMetadata().get("id"))
                        .filter(Objects::nonNull)
                        .map(String::valueOf)
                        .collect(Collectors.toList());

                if (!docIds.isEmpty()) {
                    vectorStore.delete(docIds);
                    log.info("ƒê√£ x√≥a {} documents c≈©", docIds.size());
                }
            }
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu c≈©: {}", e.getMessage());
        }
    }

    private void addDocumentsInBatches(List<Document> documents) {
        int batchSize = 20;
        for (int i = 0; i < documents.size(); i += batchSize) {
            try {
                int endIndex = Math.min(i + batchSize, documents.size());
                List<Document> batch = documents.subList(i, endIndex);

                vectorStore.add(batch);

                log.info("ƒê√£ index batch {}/{} ({} documents)",
                        (i / batchSize + 1),
                        (documents.size() + batchSize - 1) / batchSize,
                        batch.size());

                Thread.sleep(100);

            } catch (Exception e) {
                log.error("L·ªói khi index batch t·ª´ {} ƒë·∫øn {}", i, Math.min(i + batchSize, documents.size()), e);
            }
        }
    }

    private Document createHotelOverviewDocument(Hotel hotel) {
        String content = String.format("""
                        üè® KH√ÅCH S·∫†N: %s
                        üìç ƒê·ªãa ch·ªâ: %s, Qu·∫≠n %s, TP.HCM
                        ‚≠ê X·∫øp h·∫°ng: %s sao
                        üõèÔ∏è T·ªïng s·ªë ph√≤ng: %s ph√≤ng
                        üí∞ Kho·∫£ng gi√°: %s - %s VND/ƒë√™m
                        üè∑Ô∏è Lo·∫°i ph√≤ng c√≥ s·∫µn: %s
                        ‚úÖ T√¨nh tr·∫°ng: %s
                        """,
                safeString(hotel.getName()),
                safeString(hotel.getAddressDetail()),
                safeString(hotel.getDistrict()),
                safeString(hotel.getStarRating()),
                String.valueOf(hotel.getRooms().size()),
                formatPrice(getMinPrice(hotel)),
                formatPrice(getMaxPrice(hotel)),
                getRoomTypes(hotel),
                hasAvailableRooms(hotel) ? "C√≤n ph√≤ng tr·ªëng" : "H·∫øt ph√≤ng"
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", "hotel_" + hotel.getId());
        metadata.put("type", "hotel_overview");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("starRating", hotel.getStarRating());
        metadata.put("minPrice", getMinPrice(hotel));
        metadata.put("maxPrice", getMaxPrice(hotel));
        metadata.put("hasAvailableRooms", hasAvailableRooms(hotel));


        return new Document(content, metadata);
    }


    private Document createRoomDocument(Hotel hotel, Room room) {
        String content = String.format("""
                        üõèÔ∏è PH√íNG: %s
                        üî¢ S·ª©c ch·ª©a: %s ng∆∞·ªùi
                        üí∞ Gi√°: %s VND/ƒë√™m
                        ‚úÖ Tr·∫°ng th√°i: %s
                        üè® Kh√°ch s·∫°n: %s (Qu·∫≠n %s)
                        """,
                safeString(room.getTypeRoom()),
                safeString(room.getCapacity()),
                formatPrice(room.getPricePerNight()),
                room.isAvailable() ? "C√≥ s·∫µn" : "ƒê√£ ƒë·∫∑t",
                safeString(hotel.getName()),
                safeString(hotel.getDistrict())
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", "hotel_" + hotel.getId());
        metadata.put("type", "hotel_overview");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("starRating", hotel.getStarRating());
        metadata.put("minPrice", getMinPrice(hotel));
        metadata.put("maxPrice", getMaxPrice(hotel));
        metadata.put("hasAvailableRooms", hasAvailableRooms(hotel));


        return new Document(content, metadata);
    }


    private Document createLocationDocument(Hotel hotel) {
        String content = String.format("""
                        üìç ƒê·ªäA ƒêI·ªÇM KH√ÅCH S·∫†N
                        Kh√°ch s·∫°n: %s
                        ƒê·ªãa ch·ªâ: %s, Qu·∫≠n %s, TP.HCM
                        ‚≠ê X·∫øp h·∫°ng: %s sao
                        """,
                safeString(hotel.getName()),
                safeString(hotel.getAddressDetail()),
                safeString(hotel.getDistrict()),
                safeString(hotel.getStarRating())
        );

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("id", "hotel_" + hotel.getId());
        metadata.put("type", "hotel_overview");
        metadata.put("hotelId", hotel.getId());
        metadata.put("hotelName", hotel.getName());
        metadata.put("district", hotel.getDistrict());
        metadata.put("starRating", hotel.getStarRating());
        metadata.put("minPrice", getMinPrice(hotel));
        metadata.put("maxPrice", getMaxPrice(hotel));
        metadata.put("hasAvailableRooms", hasAvailableRooms(hotel));


        return new Document(content, metadata);
    }

    private String safeString(Object obj) {
        return obj != null ? String.valueOf(obj) : "";
    }


    public String searchAndAnswer(String question) {
        try {
            log.debug("ƒêang x·ª≠ l√Ω c√¢u h·ªèi: {}", question);

            // Truy v·∫•n vector store
            List<Document> relevantDocs = vectorStore.similaritySearch(
                    SearchRequest.builder()
                            .query(question)
                            .topK(6)
                            .similarityThreshold(0.5)
                            .build()
            );

            if (relevantDocs == null || relevantDocs.isEmpty()) {
                log.info("Kh√¥ng t√¨m th·∫•y document ph√π h·ª£p");
                return generateFallbackMessage(question);
            }

            // T·∫°o ph·∫ßn context t·ª´ c√°c document text (ch·ªâ text kh√¥ng l·ªói)
            String context = relevantDocs.stream()
                    .map(doc -> {
                        try {
                            return doc.getText();
                        } catch (Exception e) {
                            log.warn("L·ªói khi l·∫•y text t·ª´ document", e);
                            return null;
                        }
                    })
                    .filter(Objects::nonNull)
                    .collect(Collectors.joining("\n" + "=".repeat(50) + "\n"));

            log.info("T√¨m th·∫•y {} documents li√™n quan", relevantDocs.size());

            // T·∫°o prompt ƒë·∫ßy ƒë·ªß
            String prompt = String.format("""
                D·ª±a v√†o th√¥ng tin kh√°ch s·∫°n sau:

                %s

                C√¢u h·ªèi c·ªßa kh√°ch: %s

                ‚Üí H√£y ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p nh·∫•t. N·∫øu c√≥ nhi·ªÅu l·ª±a ch·ªçn, h√£y n√™u ∆∞u nh∆∞·ª£c ƒëi·ªÉm c·ªßa t·ª´ng kh√°ch s·∫°n v√† gi√∫p kh√°ch d·ªÖ so s√°nh.
                N·∫øu kh√¥ng t√¨m th·∫•y ph√π h·ª£p, h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† g·ª£i √Ω th√™m c√°c khu v·ª±c l√¢n c·∫≠n.
                """, context, question);

            // G·ª≠i prompt ƒë·∫øn AI
            String response = chatClient
                    .prompt()
                    .user(prompt)
                    .call()
                    .content();

            log.info("ƒê√£ t·∫°o c√¢u tr·∫£ l·ªùi th√†nh c√¥ng");
            return response;

        } catch (Exception e) {
            log.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi", e);
            return "‚ùå Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm kh√°ch s·∫°n. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c cung c·∫•p th√™m th√¥ng tin.";
        }
    }


    private String generateFallbackMessage(String question) {
        String lower = question.toLowerCase();
        String district = null;

        if (lower.contains("th·ªß ƒë·ª©c")) district = "Th·ªß ƒê·ª©c";
        else if (lower.contains("b√¨nh th·∫°nh")) district = "B√¨nh Th·∫°nh";
        else if (lower.contains("qu·∫≠n 1")) district = "Qu·∫≠n 1";
        else if (lower.contains("qu·∫≠n 3")) district = "Qu·∫≠n 3";
        else if (lower.contains("qu·∫≠n 7")) district = "Qu·∫≠n 7";

        return String.format("""
                        Hi·ªán t·∫°i, t√¥i ch∆∞a t√¨m th·∫•y kh√°ch s·∫°n n√†o ƒë√∫ng v·ªõi khu v·ª±c%s trong h·ªá th·ªëng.
                        
                        üîç Tuy nhi√™n, b·∫°n c√≥ th·ªÉ gi√∫p t√¥i hi·ªÉu r√µ h∆°n b·∫±ng c√°ch cung c·∫•p th√™m c√°c th√¥ng tin sau:
                        ‚Ä¢ Khu v·ª±c c·ª• th·ªÉ ho·∫∑c l√¢n c·∫≠n (VD: Th·ªß ƒê·ª©c, Qu·∫≠n 9, B√¨nh Th·∫°nh...)
                        ‚Ä¢ Ng√¢n s√°ch d·ª± ki·∫øn m·ªói ƒë√™m (VD: d∆∞·ªõi 500.000 VND, 1 - 2 tri·ªáu VND...)
                        ‚Ä¢ S·ªë l∆∞·ª£ng ng∆∞·ªùi ·ªü (VD: 2 ng∆∞·ªùi l·ªõn, 1 tr·∫ª em)
                        ‚Ä¢ Ti√™u chu·∫©n mong mu·ªën (VD: kh√°ch s·∫°n 3 sao, 4 sao...)
                        
                        üìå N·∫øu b·∫°n linh ho·∫°t v·ªÅ khu v·ª±c, t√¥i c√≥ th·ªÉ g·ª£i √Ω m·ªôt v√†i kh√°ch s·∫°n g·∫ßn%s ngay b√¢y gi·ªù. B·∫°n c√≥ mu·ªën xem kh√¥ng?
                        """,
                district != null ? " \"" + district + "\"" : "",
                district != null ? " " + district : " khu v·ª±c b·∫°n ch·ªçn"
        );
    }

    @CacheEvict(value = "hotelSearch", allEntries = true)
    public void updateHotelInIndex(Long hotelId) {
        try {
            log.info("ƒêang c·∫≠p nh·∫≠t index cho kh√°ch s·∫°n ID: {}", hotelId);

            // X√≥a documents c≈© c·ªßa hotel n√†y
            deleteHotelDocuments(hotelId);

            // Th√™m l·∫°i documents m·ªõi
            Hotel hotel = hotelRepository.findById(hotelId).orElse(null);
            if (hotel != null) {
                List<Document> newDocs = new ArrayList<>();
                newDocs.add(createHotelOverviewDocument(hotel));
                newDocs.add(createLocationDocument(hotel));

                for (Room room : hotel.getRooms()) {
                    newDocs.add(createRoomDocument(hotel, room));
                }

                vectorStore.add(newDocs);
                log.info("ƒê√£ c·∫≠p nh·∫≠t {} documents cho kh√°ch s·∫°n {}", newDocs.size(), hotel.getName());
            }

        } catch (Exception e) {
            log.error("L·ªói khi c·∫≠p nh·∫≠t index cho kh√°ch s·∫°n {}", hotelId, e);
        }
    }

    private void deleteHotelDocuments(Long hotelId) {
        try {
            // T√¨m t·∫•t c·∫£ documents c·ªßa hotel n√†y
            List<String> patterns = List.of(
                    "hotel_" + hotelId,
                    "location_" + hotelId
            );

            // T√¨m t·∫•t c·∫£ room documents c·ªßa hotel n√†y
            List<Document> existingDocs = vectorStore.similaritySearch(
                    SearchRequest.builder()
                            .query("hotelId:" + hotelId)
                            .topK(1000)
                            .build()
            );

            List<String> docIdsToDelete = existingDocs.stream()
                    .map(doc -> doc.getMetadata().get("id"))
                    .filter(Objects::nonNull)
                    .map(String::valueOf)
                    .collect(Collectors.toList());

            docIdsToDelete.addAll(patterns);

            if (!docIdsToDelete.isEmpty()) {
                vectorStore.delete(docIdsToDelete);
                log.debug("ƒê√£ x√≥a {} documents c≈© c·ªßa hotel {}", docIdsToDelete.size(), hotelId);
            }

        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ x√≥a documents c≈© c·ªßa hotel {}: {}", hotelId, e.getMessage());
        }
    }

    // Helper methods
    private double getMinPrice(Hotel hotel) {
        return hotel.getRooms().stream()
                .mapToDouble(Room::getPricePerNight)
                .min()
                .orElse(0);
    }

    private double getMaxPrice(Hotel hotel) {
        return hotel.getRooms().stream()
                .mapToDouble(Room::getPricePerNight)
                .max()
                .orElse(0);
    }

    private String getRoomTypes(Hotel hotel) {
        return hotel.getRooms().stream()
                .map(room -> room.getTypeRoom().toString())
                .distinct()
                .collect(Collectors.joining(", "));
    }


    private boolean hasAvailableRooms(Hotel hotel) {
        return hotel.getRooms().stream()
                .anyMatch(Room::isAvailable);
    }

    private String formatPrice(double price) {
        return String.format("%,.0f", price);
    }

    private String getPriceSegment(double price) {
        if (price < 500000) return "Ti·∫øt ki·ªám";
        if (price < 1000000) return "T·∫ßm trung";
        if (price < 2000000) return "Cao c·∫•p";
        return "Sang tr·ªçng";
    }

    private String getDistrictDescription(String district) {
        Map<String, String> descriptions = Map.of(
                "1", "Trung t√¢m th√†nh ph·ªë, g·∫ßn c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch ch√≠nh",
                "3", "Khu v·ª±c s·∫ßm u·∫•t, nhi·ªÅu nh√† h√†ng v√† cafe",
                "7", "Khu v·ª±c hi·ªán ƒë·∫°i, g·∫ßn khu Ph√∫ M·ªπ H∆∞ng",
                "B√¨nh Th·∫°nh", "Khu v·ª±c ph√°t tri·ªÉn, giao th√¥ng thu·∫≠n ti·ªán",
                "Th·ªß ƒê·ª©c", "Khu ƒë√¥ th·ªã m·ªõi, hi·ªán ƒë·∫°i"
        );
        return descriptions.getOrDefault(district, "Khu v·ª±c thu·∫≠n ti·ªán");
    }
}

