spring:
  config:
    activate:
      on-profile: dev

  mail:
    host: smtp.gmail.com
    port: 587
    username: bogiaoffline@gmail.com
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "${BASE_URL:http://localhost:8080}/login/oauth2/code/google"
            scope:
              - openid
              - email
              - profile
        provider:
          google:
            issuer-uri: https://accounts.google.com

  datasource:
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 25
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        query:
          in_clause_parameter_padding: true

  sendgrid:
    api-key: ${SENDGRID_API_KEY}
    from-email: bogiaoffline@gmail.com
    template-id: d-fba2ac2ec3c643b38ae4c2956bf5fd6f
    verification-link: ${BASE_URL:http://localhost:8080}/api/v1/users/confirm-email



  devtools:
    add-properties: true
    restart:
      enabled: false

  kafka:
    bootstrap-servers: kafka:9092

  ai:
    openai:
      base-url: http://172.31.33.35:11434
      api-key: "ollama"
      embedding:
        options:
          model: bge-m3
      chat:
        options:
          model: llama3

    vectorstore:
      pgvector:
        index-type: HNSW
        distance-type: COSINE_DISTANCE
        dimensions: 1024
        index-name: hotel_rag_index
        initialize-schema: true
        remove-existing-vector-store-table: true
        schema-validation: false

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=30m

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true

openapi:
  service:
    api-docs: backend-service
    server: ${BASE_URL:http://localhost}:${server.port}
    title: Backend service
    version: 1.0.0

jwt:
  secretKey: ${JWT_SECRET_KEY}
  expiry-minutes: 60
  expiry-day: 7
  access-key: ${JWT_ACCESS_KEY}
  refresh-key: ${JWT_REFRESH_KEY}

cloudinary:
  cloud_name: dbkgbh9kl
  api_key: ${CLOUDINARY_KEY}
  api_secret: ${CLOUDINARY_SECRET}

redis:
  host: redis
  port: 6379

booking:
  expiry:
    minutes: 15

momo:
  partner-code: MOMONPMB20210629
  return-url: ${BASE_URL:http://localhost:8080}/api/payment/momo-return
  end-point: https://test-payment.momo.vn/v2/gateway/api
  ipn-url: ${BASE_URL:http://localhost:8080}/api/payment/momo-ipn
  access-key: ${MOMO_ACCESS_KEY}
  secret-key: ${MOMO_SECRET_KEY}
  request-type: captureWallet

payment:
  vnPay:
    url: https://sandbox.vnpayment.vn/paymentv2/vpcpay.html
    tmnCode: T350LZGW
    secretKey: ${VNPAY_SECRET_KEY}
    returnUrl: ${BASE_URL:http://localhost:8080}/api/payment/vnpay-return
    version: 2.1.0
    command: pay
    orderType: other

frontend:
  url: ${BASE_URL_FE}

logging:
  level:
    root: WARN
    org.springframework.boot: INFO
    org.springframework.security: INFO
    org.hibernate: WARN
    net.logstash.logback: ERROR


